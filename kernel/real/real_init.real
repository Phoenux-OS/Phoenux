org 0x1000
bits 32

; Save stack
mov dword [saved_stack], esp

; Save pmode IDT
sidt [pmode_idt]

; Load real mode IDT
lidt [real_idt]

; Load 16-bit segments
jmp 0x28:pmode16
bits 16
pmode16:
mov ax, 0x30
mov ds, ax
mov es, ax
mov ss, ax
mov fs, ax
mov gs, ax

; Leave pmode
mov eax, cr0
and al, 0xfe
mov cr0, eax

; Load real mode segments
jmp 0x0000:real_mode
real_mode:
xor ax, ax
mov ds, ax
mov es, ax
mov fs, ax
mov gs, ax
mov ax, 0x1000
mov ss, ax
mov esp, 0xfff0

; Enable ints
sti

; Call actual routine
call 0x8000

; Disable ints
cli

; Enter long mode
mov eax, cr0
or al, 0x01
mov cr0, eax

; Load pmode segments
jmp 0x08:pmode32
bits 32
pmode32:
mov ax, 0x10
mov ds, ax
mov es, ax
mov fs, ax
mov gs, ax
mov ss, ax

; Load pmode IDT
lidt [pmode_idt]

; Restore stack
mov esp, dword [saved_stack]

; Return
ret

data:

align 4
saved_stack:
    dd 0

align 4
pmode_idt:
    dw 0
    dd 0

align 4
real_idt:
    dw 0x3FF
    dd 0
